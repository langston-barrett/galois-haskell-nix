* galois-haskell-nix

This repository provides [[https://nixos.org/nix][Nix]] builds of the Haskell projects of [[https://galois.com/][Galois, Inc]]. To
use these builds, import this package set in your Nix file and access its
=haskellPackages= attribute:

  #+begin_src nix
    let
      galoisHaskell = import ../path/to/galois-haskell-nix/default.nix { };
    in stdenv.mkDerivation {
      buildInputs = [
        galoisHaskell.haskellPackages.crucible-llvm
      ];
    }
  #+end_src

** Compiler support

   You can specify which compiler you'd like to use in =default.nix= or
   =local.nix=.

   - GHC 8.2.*: Error while building macaw. To be investigated...
   - GHC 8.4.*: Fully supported. There is [[https://ghc.haskell.org/trac/ghc/ticket/15186][a bug]] in this version of GHC
     that forces us to build without profiling enabled.
   - GHC 8.6.*: Unsupported. Too many upstream dependencies aren't ready.

** Hacking

*** Layout

    The JSON files contain the necessary information to perfectly reproduce builds
    (git revisions and SHA256 hashes of those revisions). They can be updated using
    the =Makefile=, see below.

    The various Nix files are for builds that needed customization beyond
    =cabal2nix=. Code that was added by hand is clearly demarcated from
    code that was generated.

    When building SAW, it helps to pin the versions that SAW has as submodules, see
    [[https://github.com/GaloisInc/saw-script/tree/master/deps][the deps folder of saw-script]] for the most recent hashes.

*** Overrides

    For ease of use and development, this package set is maintained as a set of
    overrides to the Haskell package set. In particular, =overrides-galois.nix=
    defines the base set of Haskell packages.

    Additional packages can be layered on top of this set (or changes can be
    made to the packages here) by using =lib.composeExtensions=, see =local.nix=.

*** =make= targets

    - =build= builds each package just as will be done in Travis. Due to the
      miracle of Nix, the builds will succeed in CI iff they succeed locally (modulo
      timeouts, which are very frequent).

    - =json= will update all the pinned dependency versions

    - =%.json.master= will update the pinned version of a dependency. For
      example, the following would update the version of Macaw::

      make macaw.json.master

    - =%.json.saw= will update a dependency to the version pinned as a submodule
      in =saw-script=.

    - =travis= regenerates =.travis.yml=

    - =clean= removes the symlinks that Nix makes when building.

    - =status= updates [[*Status][the status section below]]

** TODO TODO

  - See what manually-edited Nix files can be removed
  - Update all packages

** Status

   This section lists all the projects that currently build successfully.
   It can be regenerated with ~make status~.
   Last updated on 2019-03-06.

   - aig: ☑
   - abcBridge: ☑
   - binary-symbols: ☑
   - crackNum: ☑
   - crucible: ☑
   - crucible-c: ☐
   - crucible-jvm: ☑
   - crucible-llvm: ☑
   - crucible-saw: ☑
   - crux: ☑
   - cryptol: ☑
   - cryptol-verifier: ☑
   - elf-edit: ☑
   - flexdis86: ☑
   - galois-dwarf: ☑
   - itanium-abi: ☑
   - jvm-parser: ☑
   - jvm-verifier: ☑
   - llvm-pretty: ☑
   - llvm-pretty-bc-parser: ☑
   - llvm-verifier: ☑
   - macaw-base: ☑
   - macaw-symbolic: ☑
   - macaw-x86: ☑
   - macaw-x86-symbolic: ☑
   - parameterized-utils: ☑
   - sbv: ☑
   - saw-script: ☑
   - saw-core: ☑
   - saw-core-aig: ☑
   - saw-core-sbv: ☑
   - saw-core-what4: ☑
   - what4: ☑
   - what4-abc: ☑
   - what4-sbv: ☐
